demo()
colors
install.packages(c("Matrix", "mgcv"))
1+1
[1] 2
example <- matrix(c(1,2,3,4,5,6,7,8), nrow=4; ncol=2)
matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2)
example <- matrix(c(1,2,3,4,5,6,7,8), nrow=4, ncol=2)
View(example)
install.packages("install.packages("ggplot2")")
install.packages(c("install.packages(c("ggplot2"", ""devtools"", ""lme4"))"))
install.packages("install.packages("ggplot2")")
install.packages("ggplot2")
source("https://bioconductor.org/biocLite.R")
install.packages("biocManager")
yes
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("GenomicFeatures")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
install.packages("Rtools")
library(ggplot2)
installed.packages()
remove.packages("ggplot2")
detach package:ggplot2
detach
detach(ggplot2)
detach("ggplot2")
installed.packages()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("Rtools")
install.packages()
sessionInfo
browseVignettes("ggplot2")
help(devtools)
help(package="devtools")
help(package="devtools")
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
install.packages(c("cli", "curl", "isoband", "Rcpp", "stringi", "testthat"))
getRversion(rtools)
package_version(Rtools)
install.packages(Rtools)
install.packages("Rtools")
install.packages("rtools40")
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo= 11, bar=2 , norf= NA)
vect
names()
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar"]
vect[c("foo","bar")]
library(swirl)
swirl()
swirl()
swirl()
==
TRUE==TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
5!==7
5!=7
5 !== 7
!5==7
FALSE & FALSe
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 != 8 && 4>3.9
isTRUE(6>4)
identical(twins, twins)
identical('twins', 'twins')
xor(5==6, !FALSE)
itns <- sample(10)
ints <- sample(10)
ints
ints > 5
which(c(ints>5))
which(c(ints>7))
a <- ints>7
which(ints>7)
any(ints==o)
any(ints==0)
any(ints<0)
all(ints>0)
library(swirl)
swirl()
libryry(datasets)
library(datasets)
data("iris")
?iris
colMeans(iris)
print(iris)
split(iris, species)
split(iris, "species")
split(iris, "species$virginica")
?split
colMeans(iris)
colMeans("iris")
iris
x<-iris
colMeans(x)
class(iris)
split(x, species)
split(x, Species)
split(x, "Species")
x<-split(x, "Species$virginica")
x
x<-split(x, "virginica")
x
x<-split(x, "virginica")
mean(x)
?split
iris$Species
x<-split(x, "iris$Species")
x
x<- iris$Species
x
split(iris, x)
split(iris, x$virginica)
y<- split(iris, x)
lapply(y, colMeans)
library(datasets)
data("iris")
?iris
head("iris")
iris
sapply("iris", mean)
subset("iris","Species")
y<- split("iris", "Species")
y
y<- split("iris", iris$Species)
y<- split(iris, iris$Species)
y
y<- split(iris, iris$Species)
lapply(y, iris$Sepal.Length)
lapply(y, subset, iris$Sepal.Length)
subset(y, iris$Sepal.Length)
split(y, iris$Sepal.Length)
split(iris, iris$Sepal.Length)
subset(y, "Sepal.Length")
y["Sepal.Length"]
iris["Sepal.Length"]
lapply(y, function(sepla) sepla["Sepal.lenght"])
lapply(y, function(sepla) sepla["Sepal.Length"])
x<-lapply(y, function(sepla) sepla["Sepal.Length"])
lapply(x, mean)
summary(x)
lapply(x, mean)
data.class(x)
as.numeric(x)
lapply(x, summary)
colMeans(iris)
rowMeans(iris[,1:4])
apply(iris[,1:4],mean)
apply(iris,2,mean)
apply(iris,1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
?debug
debug(ls)
ls(c)
force(all.names)
force(envir)
force(name)
?solve
quit
Q
?solve
?is.na
!is.na
!is.null
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
reverse<- x$solve()
if(!is.null(m)){
message("solving matrix")
return(m)
}
matrix<- x$get()
m<- solve(matrix, ...)
x$setmean(m)
m
}
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
a<- matrix(1:20,4,4)
a
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
setwd("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2")
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
makeCacheMatrix(a)
cacheSolve(a)
solve(a)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
solve(m1)
m1
mymatrix<- makeCacheMatrix(m1)
mymatrix()
cacheSolve(mymatrix)
?list
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
mymatrix<- makeCacheMatrix(m1)
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
mymatrix<- makeCacheMatrix(m1)
cacheSolve(mymatrix)
debug(cacheSolve)
cacheSolve(mymatrix)
q
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
mymatrix<- makeCacheMatrix(m1)
cacheSolve(mymatrix)
solve(m1)
cacheSolve(m1)
cacheSolve(m1)
mymatrix
cacheSolve(mymatrix)
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
cacheSolve(mymatrix)
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
ma <- makeCacheMatrix(m1)
ma
cacheSolve(m1)
cacheSolve(ma)
cacheSolve(m1)
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachevector.R")
vec<- c(1,2,3,4,5)
v2<- makeVector(vec)
v2
cachemean(v2)
cachemean(ve)
cachemean(v2)
v2
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachevector.R")
v2<- makeVector(m1)
cachemean(v2)
cachemean(v2)
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
M2<- makeCacheMatrix(m1)
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
M2<- makeCacheMatrix(m1)
cacheSolve(M2)
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
cacheSolve(M2)
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
cacheSolve(M2)
m1
M2
source("O:/R/projects/R programming/Week 2/Assigment2/ProgrammingAssignment2/cachematrix.R")
